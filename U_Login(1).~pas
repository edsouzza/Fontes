unit U_Login;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, Grids, DBGrids, StdCtrls, Buttons, Mask, Encryp, DBCtrls,
  Menus, IniFiles, DateUtils,ToolEdit, jpeg, ImgList;

  Const
     InputBoxMsg = WM_USER + 123;


type
  T_frmLogin = class(TForm)
    pnl_cabecalho: TPanel;
    pnl_rodape: TPanel;
    pnl_EscolhaUsuario: TPanel;
    grid_Usuarios: TDBGrid;
    btn_Entrar: TSpeedButton;
    btn_Sair: TSpeedButton;
    lblHoraAtual: TLabel;
    lblDataDoDia: TLabel;
    subMenu: TPopupMenu;
    SYSDESENV: TMenuItem;
    lista_imagens: TImageList;
    SYSPDV: TMenuItem;
    edt_Senha: TEdit;
    lbl2: TLabel;

    procedure btn_SairClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure grid_UsuariosCellClick(Column: TColumn);
    procedure FormCreate(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure edt_NomeUsuarioEnter(Sender: TObject);
    procedure edt_FiltraUsuariosKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edt_NovaSenhaChange(Sender: TObject);
    procedure btn_GravarNovaSenhaClick(Sender: TObject);
    procedure btn_EntrarClick(Sender: TObject);
    procedure btn_CancelarClick(Sender: TObject);
    procedure btnSairLogoffClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure edt_SenhaKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edt_SenhaEnter(Sender: TObject);
    procedure edt_SenhaKeyPress(Sender: TObject; var Key: Char);
    procedure SYSPDVClick(Sender: TObject);
    procedure SYSDESENVClick(Sender: TObject);
    procedure edt_SenhaChange(Sender: TObject);

    //PROCEDIEMNTOS PERSONALIZADOS
    procedure GravarExpiracaoSeTabelaVazia;
    procedure AlterarSenha;
    procedure Autenticar;
    procedure Criptografar;
    procedure Descriptografar;
    procedure AbrirTabelas;
    procedure FecharTabelas;
    procedure MostrarUsuariosNoGrid;
    procedure ExecutarConfiguracaoInicial;
    procedure GravarConfiguracaoInicial;
    procedure IdentificarEmpresaUsuariaDoSistema;
    procedure AbriFecharTabelas;
    procedure Log_Entrada;
    procedure VerificarDataDeExpiracao;
    procedure MostrarNomeBanco;
    procedure InputBoxSet(var Msg: TMessage); message InputBoxMsg;

    //FUNCOES PERSONALIZADAS
    Function SenhaInicialEncontrada:boolean;
    Function getIDUsuarioLogado:integer;
    Function IdentificarUsuarioLogando:string;      


  private
    { Private declarations }
     senhaInicial,email,novasenha,usuario : string;
     DataAtual, DataExpiracao  : TDateTime;
     QdeDiasParaExpirar        : integer;

     //populando a tabela de menus
     ListaTextos               : TStringList;
     localArquivo,linha        : string;
     arq                       : TextFile;

  public
    { Public declarations }
      Tentativas, Log_Cod : Integer;
      SenhaCriptografadaDoBanco, SenhaDescriptografadaDoBanco : string;

  end;

var
  _frmLogin    : T_frmLogin;
  ArquivoConf  : TIniFile;


implementation

uses U_dmDados, U_dmPesquisas, U_BiblioSysSalao, U_dmDadosSegundo, U_Registro,
  U_principal, U_Desbloqueio, U_Caixa, DBClient, DB;


{$R *.dfm}


procedure T_frmLogin.FormCreate(Sender: TObject);
//DESABILITA O BOTAO FECHAR DO FORMULÁRIO
var
  hwndHandle : THANDLE;
  hMenuHandle : HMenu;
begin
//Impede movimentação do formulário
 DeleteMenu(GetSystemMenu(Handle, False), SC_MOVE, MF_BYCOMMAND);

  hwndHandle := Self.Handle;
  if (hwndHandle <> 0) then
    begin
      hMenuHandle := GetSystemMenu(hwndHandle, FALSE);
        if (hMenuHandle <> 0) then
          DeleteMenu(hMenuHandle, SC_CLOSE, MF_BYCOMMAND);
  end;

   email                  := 'edsouzza@hotmail.com';
   pathFile               :=  ExtractFilePath(Application.ExeName)+'Configuracoes.ini';
   lblDataDoDia.Caption   :=  DateToStr(date);
   lblHoraAtual.Caption   :=  timetoStr(time);
   AbrirTabelas;

   IdentificarEmpresaUsuariaDoSistema;
   ExecutarConfiguracaoInicial;       //GRAVA AUTOMATICAMENTE TODA A CONFIG INICIAL


   //IMPORTANTE  :   A SENHA INICIAL GRAVADA PARA O USUÁRIO ADMIN É eas170867


end;     

procedure T_frmLogin.FormShow(Sender: TObject);
begin

    Arquivo            := TIniFile.Create(pathFile);
    DataExpiracao      :=  StrToDate(Arquivo.ReadString('data_expiracao','DATE_EXPIRACAO',''));
    DataAtual          :=  now;
    DT_Sistema         :=  now;
    MostrarNomeBanco;

    //ShowMessage(DateToStr(DataExpiracao));

    //Verifica se tabela de expiração contem dados se estiver vazia gravar dados iniciais com data expirada
    if(TabelaEstaVazia('expiracao'))then
    begin
        GravarExpiracaoSeTabelaVazia;
    end;

    //Primerio verifica se licença esta expirada

    if(DataExpiracao < DataAtual)then
    begin
        VerificarDataDeExpiracao;
    end;     

    if (alterandoUsuario ) then
    begin

       self.Caption               := 'Trocar usuário';
       self.btn_Sair.Caption      := 'Cancelar';
       self.pnl_cabecalho.Caption := 'Escolha seu usuário e entre com a senha';

    end;

    IdentificarEmpresaUsuariaDoSistema;
    MostrarUsuariosNoGrid;

end;

procedure T_frmLogin.VerificarDataDeExpiracao;
begin

        QdeDiasParaExpirar := DifDiasEntreDatas(DataAtual,DataExpiracao);

        if( QdeDiasParaExpirar = 1 )then
        begin
          texto := 'Licença vencida a '+intToStr(QdeDiasParaExpirar)+' dia deseja adquirir sua licença agora?';
        end else if ( QdeDiasParaExpirar = 0 )then
        begin
           texto := 'Licença vencerá amanhã deseja adquirir sua licença agora?';
        end else if ( (QdeDiasParaExpirar > 1) and (QdeDiasParaExpirar <= 30) )then
        begin
           texto := 'Licença vencida a '+intToStr(QdeDiasParaExpirar)+' dias deseja adquirir sua licença agora?';
        end else if (QdeDiasParaExpirar > 30)then
        begin
           texto := 'Seja Bem Vindo, deseja  continuar e testar o sistema com todos  os   seus  recursos  gratuitamente  por 15 dias ou   adquirir  sua  licença  definitiva?';
        end;

        if Application.MessageBox(PChar(texto),'Sobre a Licença!',MB_YESNO + MB_ICONWARNING) = IdYes then
        begin

          // ABRE O FORMULÁRIO DE REGISTRO PARA ADQUIRIR A CHAVE E DAR INICIO AO PROCESSO DE OBTENÇAO DA LICENÇA DEFINITIVA
          Application.CreateForm(T_frmRegistro,  _frmRegistro);
          _frmRegistro.ShowModal;
          FreeAndNil(_frmRegistro);

        end else begin
             if ( QdeDiasParaExpirar = 0 )then
             begin
                //Licenca vencerá no dia seguinte se mesmo assim o cliente clicar em não comprar a licença abrir o login pois ainda tem 1 dia de uso
             end else begin
               texto := 'Obrigado   pelo  seu  contato, estamos  a  disposição   para   maiores esclarecimentos no e-mail : '+email;
               Application.MessageBox(PChar(texto),'Sistema não licenciado!', MB_OK + MB_ICONINFORMATION);
               Application.Terminate;
             end;

        end;

end;    

procedure T_frmLogin.AbrirTabelas;
begin

    dm_Conexao.cds_DadosFuncionarios.Active      := True;
    DM_Pesq.cdsPesqFuncionarios.Active           := True;
    dm_DadosSegundo.cds_Login.Active             := True;
    dm_Conexao.cds_acessos.Active                := True;
    dm_Conexao.cds_ListaEmpresas.Active          := true;
    dm_Conexao.cds_Permissoes.Active             := true;

end;


procedure T_frmLogin.FecharTabelas;
begin

    dm_Conexao.cds_DadosFuncionarios.Active      := False;
    DM_Pesq.cdsPesqFuncionarios.Active           := False;
    dm_DadosSegundo.cds_Login.Active             := False;
    dm_Conexao.cds_acessos.Active                := False;
    dm_Conexao.cds_ListaEmpresas.Active          := False;
    dm_Conexao.cds_Permissoes.Active             := False;

end;

procedure T_frmLogin.AbriFecharTabelas;
begin

    dm_Conexao.cds_DadosFuncionarios.Active      := False;
    dm_Conexao.cds_DadosFuncionarios.Active      := True;

    DM_Pesq.cdsPesqFuncionarios.Active           := False;
    DM_Pesq.cdsPesqFuncionarios.Active           := True;

    dm_DadosSegundo.cds_Login.Active             := False;
    dm_DadosSegundo.cds_Login.Active             := True;

end;

procedure T_frmLogin.btn_SairClick(Sender: TObject);
begin

    if (alterandoUsuario ) then
    begin

      alterandoUsuario := false;
      close;

    end else
    begin

      Application.Terminate;
      
    end;

end;


procedure T_frmLogin.FormClose(Sender: TObject; var Action: TCloseAction);
begin    

    FecharTabelas;
    dtDataDoDia.Free;
    ListaTextos.Free;
    Release;

end;

Function T_frmLogin.IdentificarUsuarioLogando:string;
begin

    //recebe o login e retorna o nome de quem esta logando no sistema
    with DM_Pesq.Qry_Geral do
    begin

        Close;
        SQL.Clear;
        SQL.add('SELECT n.func_nome, f.funcao_descricao FROM funcionarios n, funcoes f WHERE n.func_id = :pId and f.funcao_id = n.func_funcaoid');
        ParamByName('pId').AsInteger  := idSelecionado;
        open;

        if not IsEmpty then
        begin

           Result      :=  DM_Pesq.Qry_Geral.Fields[1].AsString+' '+DM_Pesq.Qry_Geral.Fields[0].AsString;
           sFuncao     :=  DM_Pesq.Qry_Geral.Fields[1].AsString;

        end;

    end;

    self.Caption           := Result;

end;


procedure T_frmLogin.grid_UsuariosCellClick(Column: TColumn);
begin

    idSelecionado                := dm_DadosSegundo.cds_Login.FieldByName('func_id').AsInteger;
    usuario                      := dm_DadosSegundo.cds_Login.FieldByName('usuario').AsString;
    self.Caption                 := IdentificarUsuarioLogando;
    edt_Senha.Enabled            := true;
    edt_Senha.Clear;
    edt_Senha.SetFocus;

end;


procedure T_frmLogin.FormKeyPress(Sender: TObject; var Key: Char);
begin

  // Enter por Tab
  //verifica se a tecla pressionada é a tecla ENTER, conhecida pelo Delphi como #13
  If key = #13 then
  Begin

    //se for, passa o foco para o próximo campo, zerando o valor da variável Key
    Key:= #0;
    Perform(Wm_NextDlgCtl,0,0);

  end;
end;


procedure T_frmLogin.edt_NomeUsuarioEnter(Sender: TObject);
begin

      Application.MessageBox('Escolha seu nome na lista ao lado, e entre com a senha!',
        'Atenção!', MB_OK + MB_ICONWARNING);
        btn_Sair.Enabled := true;

end;

procedure T_frmLogin.edt_FiltraUsuariosKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin

     if Key = VK_RETURN then
     begin

         edt_Senha.SetFocus;

     end;

end;

procedure T_frmLogin.edt_NovaSenhaChange(Sender: TObject);
begin

      btn_Entrar.Enabled           := False;
      btn_Sair.Enabled             := False;

end;

procedure T_frmLogin.btn_GravarNovaSenhaClick(Sender: TObject);
begin

 if not (alterandoUsuario)then
 begin

     AlterarSenha;
     edt_Senha.Clear;
     btn_Entrar.Enabled           := false;
     btn_Sair.Enabled             := true;
     edt_Senha.Enabled            := true;
     grid_Usuarios.Enabled        := true;
     grid_Usuarios.SetFocus;

 end else
 begin
     AlterarSenha;
     close;
 end;

end;


procedure T_frmLogin.AlterarSenha;
begin
   //não seguir adiante se o usuário não digitar uma senha
   if (novasenha <> null) and (novasenha <> '') then
   begin

        Criptografar;

        novasenha  := dm_DadosSegundo.criptografa.Output;

        with DM_Pesq.Qry_Geral do
        begin

            Close;
            SQL.Clear;
            SQL.add('Update login SET senha = :pSenha WHERE usuario = :pUsuario');
            ParamByName('pSenha').AsString    := novasenha;
            ParamByName('pUsuario').AsString  := usuario;
            ExecSQL;

        end;

        dm_DadosSegundo.cds_Login.ApplyUpdates(0);
        Application.MessageBox('Senha cadastrada com sucesso, acesse o sistema agora!', 'Gerando senha de acesso!', MB_OK + MB_ICONWARNING);

        //atualizando
        dm_DadosSegundo.cds_Login.Active:= False;
        dm_DadosSegundo.cds_Login.Active:= True;

        with dm_DadosSegundo.cds_Login do
        begin

            Close;
            CommandText:= 'select * from login WHERE status = '+QuotedStr('A')+' order by usuario';
            Open;

        end;

        entrounovasenha := true;

   end else
   begin

      Application.MessageBox('Senha inválida, entre com uma senha agora!', 'Cadastrando senha de acesso!', MB_OK + MB_ICONERROR);
      //abrir o input box novamente

      if (SenhaInicialEncontrada)then
      begin

           // Usaremos PostMessage para enviar a mensagem em caixa alta
          PostMessage(Handle, InputBoxMsg, 0, 0);
          novasenha := InputBox('Entre com nova senha','Senha','');
          //ShowMessage('A senha cadastrada foi: ' + novasenha);

          AlterarSenha;
          //aqui o sistema recebeu a senha digitada pelo usuário
      end;


   end;

end;


procedure T_frmLogin.btn_EntrarClick(Sender: TObject);
begin

     IdentificarEmpresaUsuariaDoSistema;
     IdDoUsuarioLogado := getIDUsuarioLogado;
     RetornaNomeUsuarioLogado(getIDUsuarioLogado);

     if(edt_Senha.Text = '') or (edt_Senha.Text = null) then
     begin

        Application.MessageBox('Digite sua senha!', 'Erro de Autenticação!', MB_OK + MB_ICONWARNING);
        exit;
        edt_Senha.SetFocus;

     end else begin

        Autenticar;

     end;
end;

function T_frmLogin.SenhaInicialEncontrada:boolean;
begin
     senhaInicial := 'e@s170867&'; //essa senha não pode ser usada por nenhum usuário serve para controle da senha inicial
     Descriptografar;
     SenhaDescriptografadaDoBanco := dm_DadosSegundo.criptografa.Output;

     //se identificar que se trata de acesso inicial ou senha reiniciada
     if (senhaInicial = SenhaDescriptografadaDoBanco) then
     begin
         //Application.MessageBox('Acesso inicial, cadastre sua senha pessoal!', 'Cadastro de senha de acesso!', MB_OK + MB_ICONWARNING);
         Result := true;
     end else begin
       Result := false;
     end;

end;


procedure T_frmLogin.Autenticar;
begin    

      btn_Entrar.Enabled           := False;
      grid_Usuarios.Enabled        := true;
      
      if (dm_DadosSegundo.cds_Login.Locate('usuario', usuario,[])) then
      begin

           Descriptografar;

           if edt_Senha.Text = dm_DadosSegundo.criptografa.Output then
           begin

                 Log_Entrada;

                 NivelFuncao := dm_DadosSegundo.cds_Login.fieldbyname('funcao_id').asinteger;   

                 //gravando data de instalacao se não tiver
                 Arquivo  := TIniFile.Create(pathFile);    
                 if not(Arquivo.SectionExists('data_instalacao'))then
                 begin
                    Arquivo.WriteString('data_instalacao','DATE_INSTALL',DateToStr(now));  //entrando com a data de instalacao
                    Arquivo.Free;
                 end;

                 Application.CreateForm(T_frmPrincipal,  _frmPrincipal);
                 _frmPrincipal.ShowModal;
                 FreeAndNil(_frmPrincipal);
                 
                 Close;
                 Release;
                 
           end  else
           begin  

              if Tentativas <= 1 then
              begin

                  if ( usuario = 'ADMINISTRACAO' ) then
                  begin

                        Application.MessageBox('Usuário ou Senha inválido!', 'Erro de Autenticação!',
                        MB_OK + MB_ICONWARNING);

                        edt_Senha.Clear;
                        edt_Senha.SetFocus;
                        grid_Usuarios.Enabled := False;
                        btn_Entrar.Enabled    := False;

                        Inc(Tentativas);

                  end else begin

                        Application.MessageBox('Usuário ou Senha inválido!', 'Erro de Autenticação!',
                        MB_OK + MB_ICONWARNING);

                        edt_Senha.Clear;
                        edt_Senha.SetFocus;
                        btn_Entrar.Enabled := False;

                        Inc(Tentativas);

                  end;

              end else if Tentativas = 2 then
              begin

                 Application.MessageBox('Desculpe você não tem permissão para acessar o Sistema!', 'Usuário sem permissão!',
                 MB_OK + MB_ICONWARNING);

                 Tentativas:= 0;
                 Application.Terminate;

              end;

           end;
       end;
end;


procedure T_frmLogin.Criptografar;
begin

     with dm_DadosSegundo.criptografa do
     begin

        Action := atEncryption;
        Input  := novasenha;
        Execute;

     end;

end;


procedure T_frmLogin.Descriptografar;
begin      

      with dm_DadosSegundo.criptografa do
      begin

        Action := atDecryption;
        Input  := dm_DadosSegundo.cds_Login.fieldByname('senha').AsString;
        Execute;

      end;

end;

procedure T_frmLogin.btn_CancelarClick(Sender: TObject);
begin

    Application.Terminate;

end;


procedure T_frmLogin.Log_Entrada;
begin

      With DM_Pesq.qry_Cod do begin

        Close;
        SQL.Clear;
        SQL.Add('select max(id_acessos) as UltimoNum from log_acessos');
        Open;

        if not IsEmpty then begin

           proxNum := DM_Pesq.qry_Cod.Fields[0].AsInteger+1;

        end;

      end;


     if (dm_DadosSegundo.cds_Login.Locate('usuario', usuario,[])) then
     begin

         with dm_Conexao.cds_acessos do begin

            Append;

            FieldByName('id_acessos').AsInteger := proxNum;
            FieldByname('id_usuario').asInteger := dm_DadosSegundo.cds_Login.fieldbyname('func_id').AsInteger;
            FieldByname('log_data').AsDateTime  := date;
            FieldByname('log_entrada').AsString := TimeToStr(time);

         end;

     end;

     dm_Conexao.cds_acessos.ApplyUpdates(0);

end;

procedure T_frmLogin.btnSairLogoffClick(Sender: TObject);
begin

    close;

end;

procedure T_frmLogin.MostrarUsuariosNoGrid;
begin

      with dm_DadosSegundo.cds_Login do
      begin

          Close;
          CommandText:= ('SELECT * FROM login WHERE status = '+QuotedStr('A')+' ORDER BY usuario');
          Open;

            if not IsEmpty then
            begin

                with grid_Usuarios do
                begin

                  DataSource:=  dm_DadosSegundo.ds_Login;
                  Columns.Clear;

                  Columns.Add;
                  Columns[0].FieldName         := 'USUARIO';
                  Columns[0].Width             := 435;
                  Columns[0].Alignment         := taLeftJustify;

                end;

            end;
      end;

end;

procedure T_frmLogin.ExecutarConfiguracaoInicial;
begin

       if(TabelaEstaVazia('FUNCIONARIOS'))then
           GravarConfiguracaoInicial;

end;

procedure T_frmLogin.GravarConfiguracaoInicial;
begin

      //GRAVANDO O FUNCIONARIO ADMINISTRACAO NA TBL FUNCIONARIOS

      _Sql := 'insert into funcionarios (func_id, func_funcaoid, func_nome, func_login, func_endereco, func_bairro, func_complemento, func_cep, func_telefone1, '+
                 'func_telefone2, func_celular1, func_celular2, func_email, func_datanascto, func_datacad, func_status, func_obs) '+
                 'values (:func_id, :func_funcaoid, :func_nome, :func_login, :func_endereco, :func_bairro, :func_complemento, :func_cep, :func_telefone1, '+
                 ':func_telefone2, :func_celular1, :func_celular2, :func_email, :func_datanascto, :func_datacad, :func_status, :func_obs)';

         with DM_Pesq.Qry_Auxiliar do
         begin

             close;
             sql.Clear;
             sql.Add(_Sql);
             ParamByName('func_id').AsInteger           :=  1;
             ParamByName('func_funcaoid').AsInteger     :=  1;
             ParamByName('func_nome').AsString          := 'ADMINISTRACAO';
             ParamByName('func_login').AsString         := 'EA0000';
             ParamByName('func_endereco').AsString      := 'R.MUNIZ BARRETO,201';
             ParamByName('func_bairro').AsString        := 'V.BRASILANDIA';
             ParamByName('func_complemento').AsString   := 'V.TEREZINHA';
             ParamByName('func_cep').AsString           := '02846-160';
             ParamByName('func_telefone1').AsString     := '3921-0669';
             ParamByName('func_telefone2').AsString     := '';
             ParamByName('func_celular1').AsString      := '';
             ParamByName('func_celular2').AsString      := '99475-6517';
             ParamByName('func_email').AsString         := 'edsouzza@hotmail.com';
             ParamByName('func_datanascto').AsDateTime  := StrToDate('15/02/2012');
             ParamByName('func_datacad').AsString       := DateToStr(date);
             ParamByName('func_status').AsString        := 'A';
             ParamByName('func_obs').AsString           := 'FUNCIONARIO DE SISTEMA';    
             ExecSQL;

        end;

     //=======================================================================================
      //GRAVANDO O USUARIO ADMIN NA TBL LOGIN => A SENHA INICIAL GRAVADA PARA O USUÁRIO ADMINISTRAÇÃO É eas170867
       dm_DadosSegundo.cds_Login.Active := TRUE;
       with dm_DadosSegundo.cds_Login do
       begin

          Append;

          FieldByName('id_usuario').AsInteger     := 1;
          FieldByName('func_id').AsInteger        := 1;
          FieldByName('funcao_id').AsInteger      := 1;
          FieldByName('usuario').AsString         := 'ADMIN';
          FieldByName('senha').AsString           := '87898B8D8FF11272CD64';  //eas170867
          FieldByName('status').AsString          := 'A';

          ApplyUpdates(0);

       end;

       //=======================================================================================
       //GRAVANDO AS FUNÇOES DOS USUARIOS
       dm_DadosSegundo.cds_CadFuncoes.Active := TRUE;
       
       with dm_DadosSegundo.cds_CadFuncoes do
       begin

          Append;
          FieldByName('funcao_id').AsInteger          := 1;
          FieldByName('funcao_descricao').AsString    := 'SISTEMA';
          ApplyUpdates(0);

       end;       

       with dm_DadosSegundo.cds_CadFuncoes do
       begin

          Append;
          FieldByName('funcao_id').AsInteger          := 2;
          FieldByName('funcao_descricao').AsString    := 'ADMINISTRADOR';
          ApplyUpdates(0);

       end;

       with dm_DadosSegundo.cds_CadFuncoes do
       begin

          Append;
          FieldByName('funcao_id').AsInteger          := 3;
          FieldByName('funcao_descricao').AsString    := 'USUARIO';  
          ApplyUpdates(0);

       end;

      //=======================================================================================

     //CONFIGURAÇÃO EMPRESA CLIENTE
     dm_Conexao.cds_ListaEmpresas.Active := TRUE;
     with dm_Conexao.cds_ListaEmpresas do
     begin

        Append;
        FieldByName('id_empresa').AsInteger    := 1;
        FieldByname('empresa').AsString        := 'SISTEMA';
        ApplyUpdates(0);

     end;


      //=======================================================================================

     //CONFIGURAÇÃO DAS PERMISSOES DA EMPRESA
     dm_Conexao.cds_Permissoes.Active := TRUE;
     with dm_Conexao.cds_Permissoes do
     begin

        Append;
        FieldByName('id_permissao').AsInteger    := 1;
        FieldByname('empresaid').AsInteger       := 1;
        ApplyUpdates(0);

     end;

      //=======================================================================================

     //CONFIGURAÇÃO DOS PRIMEIROS CREDORES
     dm_Conexao.cds_Credores.Active := TRUE;
     with dm_Conexao.cds_Credores do
     begin

        Append;
        FieldByName('id_credor').AsInteger    := 1;
        FieldByname('credor').AsString        := 'SABESP';
        ApplyUpdates(0);

     end;

     with dm_Conexao.cds_Credores do
     begin

        Append;
        FieldByName('id_credor').AsInteger    := 2;
        FieldByname('credor').AsString        := 'ELETROPAULO';
        ApplyUpdates(0);

     end;

     with dm_Conexao.cds_Credores do
     begin

        Append;
        FieldByName('id_credor').AsInteger    := 3;
        FieldByname('credor').AsString        := 'ALUGUEL';
        ApplyUpdates(0);

     end;


   //=======================================================================================

     //CONFIGURAÇÃO DO PRIMEIRO SEGMENTO
    dm_DadosSegundo.cds_Segmentos.Active := TRUE;
     with dm_DadosSegundo.cds_Segmentos do
     begin

        Append;
        FieldByName('id_segmento').AsInteger    := 1;
        FieldByname('segmento').AsString        := 'INFORMATICA';
        ApplyUpdates(0);

     end;

     //=======================================================================================
      //CONFIGURAÇÃO DO PRIMEIRO CONTATO
     _Sql := 'insert into contatos (cont_id, cont_nome, cont_segid, cont_endereco, cont_bairro, cont_cep, cont_telefone1, cont_telefone2, cont_celular1, cont_celular2, cont_email, cont_datacad, cont_status, cont_obs) '+
                 'values (:cont_id, :cont_nome, :cont_segid, :cont_endereco, :cont_bairro, :cont_cep, :cont_telefone1, :cont_telefone2, :cont_celular1, :cont_celular2, :cont_email, :cont_datacad, :cont_status, :cont_obs)';

         with DM_Pesq.Qry_Auxiliar do
         begin

             close;
             sql.Clear;
             sql.Add(_Sql);
             ParamByName('cont_id').AsInteger           :=  GerarProximoID('cont_id','contatos');
             ParamByName('cont_nome').AsString          :=  'EDI AQUINO DE SOUZA';
             ParamByName('cont_segid').AsInteger        :=  1;
             ParamByName('cont_endereco').AsString      :=  'RUA MUNIZ BARRETO, 201';
             ParamByName('cont_bairro').AsString        :=  'V.TEREZINHA';
             ParamByName('cont_cep').AsString           :=  '02846-160';
             ParamByName('cont_telefone1').AsString     :=  '3921-0669';
             ParamByName('cont_telefone2').AsString     :=  '';
             ParamByName('cont_celular1').AsString      :=  '99475-6517';
             ParamByName('cont_celular2').AsString      :=  '';
             ParamByName('cont_email').AsString         :=  'edsouzza@hotmail.com';
             ParamByName('cont_datacad').AsString       :=  DateToStr(now);
             ParamByName('cont_status').AsString        :=  'A';
             ParamByName('cont_obs').AsString           :=  'Desenvolvimento de pequenas aplicacoes para controle de clientes/fluxo de caixa e desenvolvimento de sites.';
             ExecSQL;

        end;

   //=======================================================================================
     //CONFIGURANDO DATA DE EXPIRAÇÃO DO SISTEMA
     _Sql := 'insert into expiracao (id_dia, dt_atual, dt_expiracao, acesso) values (:id_dia, :dt_atual, :dt_expiracao, :acesso)';

         with DM_Pesq.Qry_Auxiliar do
         begin

             close;
             sql.Clear;
             sql.Add(_Sql);
             ParamByName('id_dia').AsInteger           :=  1;
             ParamByName('dt_atual').AsDateTime        :=  date;
             ParamByName('dt_expiracao').AsDateTime    :=  StrToDate('01/01/2000');
             ParamByName('acesso').AsInteger           :=  0;
             ExecSQL;

        end;

   //========================================================================================
   //CADASTRANDO A LOGO PADRAO DO SISTEMA
    _Sql := 'insert into configuracoes (config_id, config_descricao, config_endereco, config_data) '+
             'values (:config_id, :config_descricao, :config_endereco, :config_data)';

     with DM_Pesq.Qry_Auxiliar do
     begin

         close;
         sql.Clear;
         sql.Add(_Sql);
         ParamByName('config_id').AsInteger             := 1;
         ParamByName('config_descricao').AsString       := 'LOGO PADRAO';
         ParamByName('config_endereco').AsString        := ExtractFilePath(Application.ExeName)+'\imagens\padrao.jpg';           //c:\program files (x86)\syspdv\imagens\padrao.jpg';
         ParamByName('config_data').AsDate              := Now;
         ExecSQL;

    end;

  {==========================================================================================
   POPULANDO A TABELA DE MENUS}
      ListaTextos := TStringList.Create;
      ListaTextos.Clear;     
      localArquivo := ExtractFilePath(Application.ExeName)+'\SQL_MENUS.txt';
      AssignFile(arq,localArquivo);

      {$I-}         // desativa a diretiva de Input
      Reset(arq);   // Abre o arquivo texto para leitura
      {$I+}         // ativa a diretiva de Input

      if (IOResult <> 0) then// verifica o resultado da operação de abertura
      begin
         showmessage('Erro na abertura do arquivo !!!')
      end else
      begin
             while (not eof(arq)) do
             begin

                 readln(arq, linha);      // Lê uma linha do arquivo
                 ListaTextos.Add(linha);  // imprime a linha dentro do StringList (ListaTextos)

                 //quebrando a linha -> (1;MENUCONFIGURACOES;3;L) em um ARRAY sendo => CODIGO:ListaTextos[0] MENU:ListaTextos[1]  NIVELID:ListaTextos[2]   STATUS:ListaTextos[3]
                 ListaTextos:= Quebra(linha,';');

                 //aqui vão os procedimentos de gravação dos dados da linha dividida em um array
                 _Sql := 'insert into menus (codigo, menu, nivelid, status) values (:codigo, :menu, :nivelid, :status)';

                 with DM_Pesq.Qry_Auxiliar do
                 begin

                     close;
                     sql.Clear;
                     sql.Add(_Sql);
                     ParamByName('codigo').AsInteger    := StrToInt(ListaTextos[0]);
                     ParamByName('menu').AsString       := ListaTextos[1];
                     ParamByName('nivelid').AsInteger   := StrToInt(ListaTextos[2]);
                     ParamByName('status').AsString     := ListaTextos[3];
                     ExecSQL;

                 end;

              end;

             CloseFile(arq); // Fecha o arquivo texto aberto
      end;               


  //==========================================================================================


  Application.MessageBox('Executada configuração inicial do Sistema!',
               'Seja bem vindo!', MB_OK + MB_ICONASTERISK);


     dm_Conexao.cds_DadosFuncionarios.Active := false;
     dm_DadosSegundo.cds_Login.Active        := false;
     dm_DadosSegundo.cds_CadFuncoes.Active   := false;
     dm_Conexao.cds_ListaEmpresas.Active     := false;
     dm_DadosSegundo.cds_Segmentos.Active    := false;
     dm_Conexao.cds_Credores.Active          := false;
     
end;

procedure T_frmLogin.IdentificarEmpresaUsuariaDoSistema;
begin

     with DM_Pesq.Qry_Geral do
     begin

         close;
         sql.Clear;
         sql.Add('SELECT razaosocial FROM empresa');
         open;

         if not IsEmpty then
         begin

             NomeEmpresaLogada      := DM_Pesq.Qry_Geral.Fields[0].AsString;
             idEmpresaLogada        := 2;
             pnl_cabecalho.Caption  := NomeEmpresaLogada;
             
         end else pnl_cabecalho.Caption :=  'ACESSO AO SISTEMA';

     end;

       //gravando o id da empresa na tabela permissoes
       dm_Conexao.cds_Permissoes.ApplyUpdates(0);

end;

Function T_frmLogin.getIDUsuarioLogado:integer;
var
   nomeOperador : string;
begin

     IDOperador   := IdFuncionarioLogado(usuario);
     nomeOperador := RetornaNomeUsuarioLogado(IDOperador);
     Result       := IDOperador;

end;

procedure T_frmLogin.edt_SenhaKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin

     if key=13 then
     begin

         btn_EntrarClick(self);

     end;

end;

procedure T_frmLogin.edt_SenhaEnter(Sender: TObject);
begin

   if(  usuario = '' ) then
   begin

    Application.MessageBox('Selecione um usuário na lista ao acima!', 'Usuário não selecionado!',
                 MB_OK + MB_ICONWARNING);   
    edt_Senha.Enabled := false;

   end else begin

      if (SenhaInicialEncontrada)then
      begin

           // Usaremos PostMessage para enviar a mensagem em caixa alta
          PostMessage(Handle, InputBoxMsg, 0, 0);
          novasenha := InputBox('Cadastro de Senha de Acesso','Senha','');
          //ShowMessage('A senha cadastrada foi: ' + novasenha);

          AlterarSenha;
          //aqui o sistema recebeu a senha digitada pelo usuário
      end;

   end;

end;

procedure T_frmLogin.edt_SenhaKeyPress(Sender: TObject; var Key: Char);
begin
  btn_Entrar.Enabled := true;
end;

procedure T_frmLogin.GravarExpiracaoSeTabelaVazia;
begin

  //caso a tabela de expiração esteja vazia gerar data de expiração com data vencida o campo INFO nem foi tratado ou seja estará vazio
  _Sql := 'insert into expiracao (id_dia, dt_atual, dt_expiracao, acesso) values (:id_dia, :dt_atual, :dt_expiracao, :acesso)';

   with DM_Pesq.Qry_Auxiliar do
   begin

       close;
       sql.Clear;
       sql.Add(_Sql);
       ParamByName('id_dia').AsInteger           :=  1;
       ParamByName('dt_atual').AsDateTime        :=  date;
       ParamByName('dt_expiracao').AsDateTime    :=  StrToDate('01/01/2000');
       ParamByName('acesso').AsInteger           :=  0;
       ExecSQL;

  end;

end;

procedure T_frmLogin.SYSDESENVClick(Sender: TObject);
begin

      {SETANDO BANCO SYSDESENV PARA TESTES E DESENVOLVIMENTO}
      ArquivoConf := TIniFile.Create(ExtractFilePath(Application.ExeName)+'Configuracoes.ini');

      if (FileExists(ExtractFilePath(Application.ExeName) + 'Configuracoes.ini'))then
      begin

          //na linha seguinte escreve no arquivo o caminho do banco de dados dentro do arquivo .ini
          ArquivoConf.WriteString('caminho_do_banco','DATABASE','C:\Meus Documentos\Bancos_De_Projetos\SysPdv\SYSDESENV.FDB');

      end;

      Application.MessageBox('Atenção novo banco setado com sucesso acesse novamente!', 'Escolhendo Banco de Dados', MB_ICONEXCLAMATION);
      Application.Terminate;


end;

procedure T_frmLogin.MostrarNomeBanco;
begin

  sNomeBanco := Arquivo.ReadString('caminho_do_banco','DATABASE','');
  delete(sNomeBanco,1,45);

  self.Caption := sNomeBanco;

end;

procedure T_frmLogin.SYSPDVClick(Sender: TObject);
begin

        {SETANDO BANCO SYSPDV ORIGINAL PARA PRODUÇÃO}
      ArquivoConf := TIniFile.Create(ExtractFilePath(Application.ExeName)+'Configuracoes.ini');

      if (FileExists(ExtractFilePath(Application.ExeName) + 'Configuracoes.ini'))then
      begin

          //na linha seguinte escreve no arquivo o caminho do banco de dados dentro do arquivo .ini
          ArquivoConf.WriteString('caminho_do_banco','DATABASE','C:\Meus Documentos\Bancos_De_Projetos\SysPdv\SYSPDV.FDB');

      end;

      Application.MessageBox('Atenção novo banco setado com sucesso acesse novamente!', 'Escolhendo Banco de Dados', MB_ICONEXCLAMATION);
      Application.Terminate;


end;

procedure T_frmLogin.InputBoxSet(var Msg: TMessage);
var
  i: integer;
begin
  //INPUT BOX DA PARA DIGITAÇÃO DA NOVA SENHA COM CARACTERS DE *
  for i:=0 to Screen.Forms[0].ComponentCount-1 do
  begin
    if Screen.Forms[0].Components[i] is TEdit then
    begin
      With TEdit( Screen.Forms[0].Components[i] ) do
      begin
        PasswordChar := '*'; //Aqui está o caractere q irá aparecer na inputbox
        Clear;               //Limpamos a caixa de digitação da senha. 
      end;
    end;
  end;
end;


procedure T_frmLogin.edt_SenhaChange(Sender: TObject);
var
    vl_label : TLabel; //variável do tipo Label
begin
      //CENTRALIZANDO A DIGITAÇÃO DO EDIT DA SENHA
      vl_label := TLabel.Create(self); //criamos um label

      with vl_label do
      begin

          //pegamos a fonte usada no edit
          Font.Name := TEdit(sender).Font.Name;

          //pegamos o conteúdo do edit
          Caption   := TEdit(sender).Text;

         //centraliza no label e retorna para o edit
          SendMessage(TEdit(sender).Handle, EM_SETMARGINS, EC_LEFTMARGIN,
          (TEdit(sender).Width-vl_label.Width) div 2);

      end;

      vl_label.Free;

end;

end.
